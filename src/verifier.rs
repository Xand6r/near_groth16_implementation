use near_groth16_verifier::{self, G1Point, G2Point, Verifier};
use near_bigint::U256;

pub fn get_verifier()-> Verifier{
    let alfa1 = G1Point{
        x: U256::from_dec_str("20491192805390485299153009773594534940189261866228447918068658471970481763042").unwrap(),
        y: U256::from_dec_str("9383485363053290200918347156157836566562967994039712273449902621266178545958").unwrap()
    };
    let beta2 = G2Point {
        x:[
            U256::from_dec_str("4252822878758300859123897981450591353533073413197771768651442665752259397132").unwrap(),
            U256::from_dec_str("6375614351688725206403948262868962793625744043794305715222011528459656738731").unwrap()
        ],
        y:[
            U256::from_dec_str("21847035105528745403288232691147584728191162732299865338377159692350059136679").unwrap(),
            U256::from_dec_str("10505242626370262277552901082094356697409835680220590971873171140371331206856").unwrap()
        ]
    };
    let gamma2 = G2Point {
        x:[
            U256::from_dec_str("11559732032986387107991004021392285783925812861821192530917403151452391805634").unwrap(),
            U256::from_dec_str("10857046999023057135944570762232829481370756359578518086990519993285655852781").unwrap()
        ],
        y:[
            U256::from_dec_str("4082367875863433681332203403145435568316851327593401208105741076214120093531").unwrap(),
            U256::from_dec_str("8495653923123431417604973247489272438418190587263600148770280649306958101930").unwrap()
        ]
    };
    let delta2 = G2Point {
        x:[
            U256::from_dec_str("1668323501672964604911431804142266013250380587483576094566949227275849579036").unwrap(),
            U256::from_dec_str("12043754404802191763554326994664886008979042643626290185762540825416902247219").unwrap()
        ],
        y:[
            U256::from_dec_str("7710631539206257456743780535472368339139328733484942210876916214502466455394").unwrap(),
            U256::from_dec_str("13740680757317479711909903993315946540841369848973133181051452051592786724563").unwrap()
        ]
    };
    let ic = vec![
        G1Point{
            x: U256::from_dec_str("8446592859352799428420270221449902464741693648963397251242447530457567083492").unwrap(),
            y: U256::from_dec_str("1064796367193003797175961162477173481551615790032213185848276823815288302804").unwrap()
        },
        G1Point{
            x: U256::from_dec_str("3179835575189816632597428042194253779818690147323192973511715175294048485951").unwrap(),
            y: U256::from_dec_str("20895841676865356752879376687052266198216014795822152491318012491767775979074").unwrap()
        },
        G1Point{
            x: U256::from_dec_str("5332723250224941161709478398807683311971555792614491788690328996478511465287").unwrap(),
            y: U256::from_dec_str("21199491073419440416471372042641226693637837098357067793586556692319371762571").unwrap()
        },
        G1Point{
            x: U256::from_dec_str("12457994489566736295787256452575216703923664299075106359829199968023158780583").unwrap(),
            y: U256::from_dec_str("19706766271952591897761291684837117091856807401404423804318744964752784280790").unwrap()
        },
        G1Point{
            x: U256::from_dec_str("19617808913178163826953378459323299110911217259216006187355745713323154132237").unwrap(),
            y: U256::from_dec_str("21663537384585072695701846972542344484111393047775983928357046779215877070466").unwrap()
        },
        G1Point{
            x: U256::from_dec_str("6834578911681792552110317589222010969491336870276623105249474534788043166867").unwrap(),
            y: U256::from_dec_str("15060583660288623605191393599883223885678013570733629274538391874953353488393").unwrap()
        },
    ];
    let new_verifier = Verifier::new(alfa1, beta2, gamma2, delta2, ic);

    new_verifier
}